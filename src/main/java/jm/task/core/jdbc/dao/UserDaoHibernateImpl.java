package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;
import net.bytebuddy.implementation.bytecode.Throw;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import java.util.ArrayList;
import java.util.List;

public class UserDaoHibernateImpl implements UserDao {
    public SessionFactory sf = Util.getSF();
    public UserDaoHibernateImpl() {

    }
    @Override
    public void createUsersTable() {
        try {
            Session session = sf.getCurrentSession();
            session.beginTransaction();
            session.createNativeQuery("CREATE TABLE IF NOT EXISTS users(" +
                    "id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY," +
                    "name VARCHAR(100)," +
                    "lastName VARCHAR(100)," +
                    "age INT)").executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public void dropUsersTable() {
        try {
            Session session = sf.getCurrentSession();
            session.beginTransaction();
            session.createNativeQuery("DROP TABLE IF EXISTS users").executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        try {
            Session session = sf.getCurrentSession();
            session.beginTransaction();
            User user = new User(name,lastName,age);
            session.save(user);
            System.out.println("User с именем " + name + " добавлен в базу данных");
            session.getTransaction().commit();
        } catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public void removeUserById(long id) {
        try {
            Session session = sf.getCurrentSession();
            session.beginTransaction();
            User user = session.get(User.class,id);
            session.delete(user);
            session.getTransaction().commit();
        } catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<User> getAllUsers() {
        List<User> list = new ArrayList<>();

        try {
            Session session = sf.getCurrentSession();
            session.beginTransaction();
            list = session.createQuery("FROM User").getResultList();
            session.getTransaction().commit();
        } catch (HibernateException e){
            throw new RuntimeException(e);
        }
        System.out.println(list);
        return list;
    }

    @Override
    public void cleanUsersTable() {
        try {
            Session session = sf.getCurrentSession();
            session.beginTransaction();
            session.createQuery("DELETE FROM User").executeUpdate();
            session.getTransaction().commit();
        } catch (HibernateException e){
            throw new RuntimeException(e);
        }
    }
}
